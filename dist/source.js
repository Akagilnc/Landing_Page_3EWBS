//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('landingpage3e', ["dom-renderer"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory.call(global,require('dom-renderer'));
    else
        return  this['landingpage3e'] = factory.call(self,this['dom-renderer']);

})(function (dom_renderer) {

function merge(base, path) {
  return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {
    return input[index - 1] === '.' ? match : '';
  });
}

function outPackage(name) {
  return /^[^./]/.test(name);
}

    var require = (typeof module === 'object') ?
        function () {

            return  module.require.apply(module, arguments);
        } : (
            this.require  ||  function (name) {

                if (self[name] != null)  return self[name];

                throw ReferenceError('Can\'t find "' + name + '" module');
            }
        );

    var _include_ = include.bind(null, './');

    function include(base, path) {

        path = outPackage( path )  ?  path  :  ('./' + merge(base, path));

        var module = _module_[path], exports;

        if (! module)  return require(path);

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = _include_( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    include.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}

function _asyncToGenerator(fn) {
    return function() {
        var self = this,
            args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    'next',
                    value
                );
            }
            function _throw(err) {
                asyncGeneratorStep(
                    gen,
                    resolve,
                    reject,
                    _next,
                    _throw,
                    'throw',
                    err
                );
            }
            _next(undefined);
        });
    };
}

var _module_ = {};
_module_['./index'] = {
    base: '.',
    dependency: []
};

_module_['./index'].factory = function(require, exports, module) {
    var _domRenderer = require('dom-renderer');

    var map = new AMap.Map('container', {
        resizeEnable: true,
        //是否监控地图容器尺寸变化
        zoom: 16,
        //初始化地图层级
        center: [104.062617, 30.539173],
        //初始化地图中心点
        dragEnable: false
    });
    var marker = new AMap.Marker({
        position: [104.062617, 30.539173] //位置
    });
    map.add(marker); //添加到地图

    _asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee() {
            var _i, _arr, name, view_list, list;

            return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                    switch ((_context.prev = _context.next)) {
                        case 0:
                            (_i = 0), (_arr = ['teacher', 'student']);

                        case 1:
                            if (!(_i < _arr.length)) {
                                _context.next = 14;
                                break;
                            }

                            name = _arr[_i];
                            view_list = new _domRenderer.ViewList(
                                document.querySelector('#' + name)
                            );
                            _context.next = 6;
                            return fetch('source/'.concat(name, 's.json'));

                        case 6:
                            _context.next = 8;
                            return _context.sent.json();

                        case 8:
                            list = _context.sent;
                            _context.next = 11;
                            return view_list.render(list);

                        case 11:
                            _i++;
                            _context.next = 1;
                            break;

                        case 14:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, _callee);
        })
    )();
};

_module_['dom-renderer'] = {
    exports: dom_renderer
};

    return _include_('./index');
});